$elegant-spacing: (
  unit: 1rem,
  multiples: (0 (1:2) 1 2 3 4 5 6),
  aliases: (
    padding: 'p',
    margin: 'm',
    top: 't',
    right: 'r',
    bottom: 'b',
    left: 'l',
    vertical: 'v',
    horizontal: 'h'
  )
);

// Inspired by https://github.com/digitaledgeit/sass-spacing

$elegant-spacing-unit: map-get($elegant-spacing, 'unit');
$elegant-spacing-multiples: map-get($elegant-spacing, 'multiples');

@function contains($list, $item) {
  @if index($list, $item) { @return true; }
  @return false;
}

@function elegant-valid-multiple($value) {
  // TODO: Handle fraction maps
  @return contains($elegant-spacing-multiples, $value);
}

@function elegant-multiple-modifier($value) {
  @if elegant-multiple-is-fraction($value) {
    @return elegant-fraction-modifier($value);
  }
  @return $value;
}

@function elegant-multiple-value($value) {
  @if elegant-multiple-is-fraction($value) {
    @return elegant-fraction-value($value);
  }
  @return $value;
}

@function elegant-multiple-is-fraction($value) {
  @return type-of($value) == 'map';
}

@function elegant-fraction-modifier($fraction-map) {
  @each $k, $v in $fraction-map {
    @return $k + '\\/' + $v;
  }
}

@function elegant-fraction-value($fraction-map) {
  @each $k, $v in $fraction-map {
    @return $k / $v;
  }
}

@function elegant-mult($value) {
  // @if (elegant-valid-multiple($value)) {
    @return $value * $elegant-spacing-unit;
  // }
  @warn 'elegant-sass-things error: ' + $value + ' is an invalid multiple. Valid multiples are: ' +
    $elegant-spacing-multiples + '. You can configure this list in the $elegant-spacing config map.';
}

@mixin elegant-v-h($rule, $v-h, $h) {
  @if ($h) {
    #{$rule}: elegant-mult($v-h) elegant-mult($h);
  } @else {
    #{$rule}: elegant-mult($v-h);
  }
}

@mixin m($v-h: 1, $h: null) {
  @include elegant-v-h('margin', $v-h, $h);
}
@mixin mt($mult: 1) {
  margin-top: elegant-mult($mult);
}

@mixin elegant-generate-margin-classes {
  @each $mult in $elegant-spacing-multiples {
    $modifier: elegant-multiple-modifier($mult);
    $value: elegant-multiple-value($mult);
    .u-m--#{$modifier} {
      @include m($value);
    }
    .u-mt--#{$modifier} {
      @include mt($value);
    }
    // .u-mr--#{$modifier} {
    //   @include mr($value);
    // }
    // .u-mb--#{$modifier} {
    //   @include mb($value);
    // }
    // .u-ml--#{$modifier} {
    //   @include ml($value);
    // }
    // .u-mv--#{$modifier} {
    //   @include mv($value);
    // }
    // .u-mh--#{$modifier} {
    //   @include mh($value);
    // }
  }
}

@include elegant-generate-margin-classes();

// @mixin m-h($size: 1) {
//     margin-left: map-get($spacing-sizes, $size);
//     margin-right: map-get($spacing-sizes, $size);
// }
//
// @mixin m-v($size: 1) {
//       margin-top: map-get($spacing-sizes, $size);
//       margin-bottom: map-get($spacing-sizes, $size);
// }
//
// @mixin m-t($size: 1) {
//     margin-top: map-get($spacing-sizes, $size);
// }
//
// @mixin m-r($size: 1) {
//     margin-right: map-get($spacing-sizes, $size);
// }
//
// @mixin m-b($size: 1) {
//     margin-bottom: map-get($spacing-sizes, $size);
// }
//
// @mixin m-l($size: 1) {
//     margin-left: map-get($spacing-sizes, $size);
// }
//
// @mixin p($size-all-or-v: 1, $size-h: null) {
//     @if ($size-h) {
//         padding: map-get($spacing-sizes, $size-all-or-v) map-get($spacing-sizes, $size-h);
//     } @else {
//         padding: map-get($spacing-sizes, $size-all-or-v);
//     }
// }
//
// @mixin p-h($size: 1) {
//     padding-left: map-get($spacing-sizes, $size);
//     padding-right: map-get($spacing-sizes, $size);
// }
//
// @mixin p-v($size: 1) {
//     padding-top: map-get($spacing-sizes, $size);
//     padding-bottom: map-get($spacing-sizes, $size);
// }
//
// @mixin p-t($size: 1) {
//     padding-top: map-get($spacing-sizes, $size);
// }
//
// @mixin p-r($size: 1) {
//     padding-right: map-get($spacing-sizes, $size);
// }
//
// @mixin p-b($size: 1) {
//     padding-bottom: map-get($spacing-sizes, $size);
// }
//
// @mixin p-l($size: 1) {
//     padding-left: map-get($spacing-sizes, $size);
// }
